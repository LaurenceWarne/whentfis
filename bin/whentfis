#!/usr/bin/env python3

import argparse
import calendar
import datetime
import sys
from dateutil.parser import parse


def main():
    # Set up argparse
    description = """Transforms dates in the form dd/mm/yyyy or mm/dd/yyy to
                     a human readable format."""
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("date", help="Date you want to rationalise")
    args = parser.parse_args

    # Attempt to parse date
    try:
        input_date = parse(args["date"])
    except ValueError:
        print("Cannot guess date format for: " + args["date"])
        return
    today = datetime.date.today()
    get_rational_date(input_date, today)


def get_rational_date(input_date, date_from):
    start_of_week = input_date - datetime.timedelta(days=input_date.weekday())
    difference = (input_date - date_from).days
    # Rounds down, even for negatives
    week = difference // 7
    day_of_week = calendar.day_name[input_date.weekday()]

    # Today
    if input_date == date_from:
        print("That's today!")
    # A day later this week
    elif week == 0:
        print("This {day}".format(week_num=week, day=day_of_week))
    # A day earlier this week
    elif week == -1 and input_date.weekday() < date_from.weekday():
        print("It was this {day}".format(week_num=week, day=day_of_week))
    # Some day next week
    elif week == 1:
        print("Next {day}".format(week_num=week, day=day_of_week))
    # A day last week
    elif week == -1 and input_date.weekday() > date_from.weekday():
        print("It was this {day}".format(week_num=week, day=day_of_week))
    # A day further forward than next week
    elif week > 1:
        print(
            "{week_num} weeks {day}"
            .format(week_num=week, day=day_of_week)
        )
    # A day further behind than last week
    else:
        print("Weeks ago")
        

if __name__ == "__main__":
    main()
